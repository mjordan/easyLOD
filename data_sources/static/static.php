<?php

/**
 * Data source plugin for easyLOD that serves up static RDF files. 
 *
 * In this sample plugin, the RDF files were created from MODS documents
 * retrieved from http://www.islandscholar.ca/ and transformed into MODSRDF 
 * using the XSL stylesheet at http://www.loc.gov/standards/mods/modsrdf/xsl-files/modsrdf.xsl
 * This transformation was done in a batch offline, not in realtime by this plugin.
 *
 * Distributed under the MIT License, http://opensource.org/licenses/MIT.
 */

/**
 * Required function. Checks to see if a configuration for this plugin
 * exists in the $plugins array, and if not, returns the configuration
 * defined here.
 *
 * @param string $namespace
 *  The namespace portion of the request URI.
 *
 * @return
 *  An associative array containing this plugin's configuration data
 *  in key => value pairs.
 */
function dataSourceConfig($namespace) {
  // First check to see if this configration is being
  // overridden in plugins.php.
  global $plugins;
  if (array_key_exists($namespace, $plugins)) {
    return $plugins[$namespace]['dataSourceConfig'];
  }
  // If the configuration is not being overridden, use
  // this one.
  else {
    return array(
      // Absolute path to the static files (in this sample plugin, the same directory
      // this script is in). Include the trailing '/'.
      'data_base_path' => dirname(__FILE__) . '/',
    );
  }
}

/**
 * Required function. Defines the XML namespace that the elements
 * generated by this plugin belong to.
 *
 * @return
 *  An associative array containing the XML namespace prefix as a
 *  key and the namespace URI as its value.
 */
function getDataSourceNamespaces() {
  return array();
}

/**
 * Required function. Defines the 'human-readable' web page for
 * an item. In the case of the MODSRDF files used in this example,
 * the URL of the human-readable representation of the resource is
 * expressed in the 'rdf:about' attribute of the top-level modsrdf:ModsResource
 * element. Each plugin that serves up static RDF will need  will need 
 * to parse its own URL, or generate HTML from the static RDF files. 
 *
 * @param string $identifier
 *  The identifier portion of the request URI.
 *
 * @param object $app
 *  The Slim $app object.
 */
function getWebPage($identifier, $app) {
  list($namespace, $uniqueId) = explode(':', $identifier);
  $config = dataSourceConfig($namespace);
  $filePath = $config['data_base_path'] . $uniqueId. '.rdf';
  // Parse the value of the 'rdf:about' attribute of the top-level
  // modsrdf:ModsResource element. The XML looks like this: 
  // <modsrdf:ModsResource rdf:about="http://www.islandscholar.ca/fedora/repository/ir:6223">.
  if (file_exists($filePath)) {
    $xml = simplexml_load_file($filePath);
    $xml->registerXPathNamespace("modsrdf", "http://www.loc.gov/mods/rdf/v1#");
    $xml->registerXPathNamespace("rdf", "http://www.w3.org/1999/02/22-rdf-syntax-ns#");
    $modsResource = $xml->xpath('//modsrdf:ModsResource');
    $url = (string) $modsResource[0]->attributes('rdf', TRUE)->about;
    $app->redirect($url, 303);
  }
  else {
    $app->halt(404);
  }
}

/**
 * Generate the RDF XML for the item.
 *
 * Data source plugins are required to define this function
 * unless they are returning full RDF documents; in that case,
 * they must define the getResourceDataRaw() function instead.
 * See the 'static' plugin for an example.
 *
 * @param string $identifier
 *  The identifier portion of the request URI.
 *
 * @param object $xml
 *  The SimpleXML $xml object.
 *
 * @param object $app
 *  The Slim $app object.
 *
 * @return
 *  The SimpleXML $xml object.
 */
function getResourceDataRaw($identifier, $xml, $app) {
  list($namespace, $uniqueId) = explode(':', $identifier);
  $config = dataSourceConfig($namespace);
  $filePath = $config['data_base_path'] . $uniqueId. '.rdf';
  if (file_exists($filePath)) {
    $xmlString = file_get_contents($filePath);
    $xml->writeRaw($xmlString);
    return $xml;
  }
  else {
    $app->halt(404);
  }
}
